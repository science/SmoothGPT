import{r as M,g as n,c as f,b as v,l as x,o,q as j,u as B,w as N,x as D,h as J,v as Y,i as z,p as G,y as L}from"./index-5e7d5207.js";function i(e){return new Promise(s=>setTimeout(s,e))}async function g(e,s=4e3,h=25){const u=performance.now();for(;!e();){if(performance.now()-u>s)throw new Error("waitFor: timeout");await i(h)}}function I(){const e=document.querySelector(".main-content-area");return e?e.querySelector(".overflow-y-auto"):null}function k(){const e=I();return e?Array.from(e.querySelectorAll(".message")):[]}function T(e){return Array.from(e.querySelectorAll("details"))}function E(e){return Array.from(e.querySelectorAll("div.rounded.border.border-gray-500"))}function A(e){return(e.querySelector("pre")?.textContent||"").trim()}function H(e){return(e.querySelector(".text-xs")?.textContent||"").trim().toLowerCase()}function V(e){const s=new TextEncoder;return new ReadableStream({start(h){for(const u of e){const q=`event: ${u.event}
data: ${JSON.stringify(u.data)}

`;h.enqueue(s.encode(q))}h.close()}})}function U(e){const s=V(e);return new Response(s,{headers:{"Content-Type":"text/event-stream"}})}function W(e){if(!e)return!1;const s=Math.floor(e.length/2);if(e.length%2!==0)return!1;const h=e.slice(0,s),u=e.slice(s);return h===u}M({id:"reasoning-live-sse-panel-dedupe",name:"Reasoning SSE: single panel streams once and finalizes without duplication",tags:["live","reasoning","ui"],timeoutMs:15e3,fn:async e=>{const s=n(f),h=n(v),u=n(x),q=n(o);try{f.set([{title:"Reasoning Test Conversation",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"User question here"},{role:"assistant",content:"Assistant prior reply"}]}]),v.set(0),x.set([]),o.set([]),await i(0),await g(()=>!!I(),4e3),await i(50);const y=k();e.that(y.length>=1,"At least one message element should render");const $=0,l=y[$];e.that(!!l,"User message element exists at anchor index");let p=T(l);e.that(p.length===0,"No reasoning window present before SSE");const P=0,b=j(P,"gpt-5",$);await g(()=>T(l).length===1,3e3);let w=T(l);const c=w[0];e.that(!!c,"Reasoning collapsible window created on first reasoning SSE");const d=B("text",P,b);await g(()=>E(c).length===1,3e3);let R=E(c);e.that(R.length===1,"Exactly one reasoning panel is created for the stream");const a=["Alpha ","Beta ","Gamma"];let r="";for(const t of a){r+=t,N(d,t),await i(0),await g(()=>A(E(c)[0])===r.trim(),2e3);const m=A(E(c)[0]);e.that(m===r.trim(),`Panel text matches streamed content so far: "${r.trim()}"`),e.that(!m.includes(r.trim()+r.trim()),"Panel text is not duplicated")}D(d),await i(0),await g(()=>H(E(c)[0]).includes("done"),3e3);const _=E(c);e.that(_.length===1,"No additional panel created on finalize");const S=A(_[0]);e.that(S===r.trim(),"Final panel text matches exactly the streamed data"),e.that(!S.includes(r.trim()+r.trim()),"Final text is not duplicated"),w=T(l),e.that(w.length===1,"Exactly one reasoning window exists for the anchor")}finally{o.set(q),x.set(u),f.set(s),v.set(h),await i(0)}}});M({id:"reasoning-live-sse-realistic-duplication",name:"Reasoning SSE: realistic stream (gpt-5-nano) detects duplicate text and panels",tags:["live","reasoning","ui"],timeoutMs:2e4,fn:async e=>{const s=n(f),h=n(v),u=n(x),q=n(o),y=window.fetch?.bind(window);try{J.set("high"),Y.set("low"),z.set("auto"),f.set([{title:"Reasoning SSE Realistic",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"User question here"},{role:"assistant",content:"Assistant prior reply"}]}]),v.set(0),x.set([]),o.set([]),await i(0),await g(()=>!!I(),4e3),await i(50);const $=k();e.that($.length>=1,"At least one message element should render");const l=$[0],p=["Alpha ","Beta "],P=["Gamma ","Delta "],b=p.join(""),w=P.join(""),c=[{event:"response.reasoning_text.delta",data:{delta:p[0]}},{event:"response.reasoning_text.delta",data:{delta:p[1]}},{event:"response.reasoning_text.done",data:{text:b}},{event:"response.reasoning_text.delta",data:{delta:P[0]}},{event:"response.reasoning_text.delta",data:{delta:P[1]}},{event:"response.reasoning_text.done",data:{text:w}},{event:"response.completed",data:{}}];window.fetch=(C,F)=>{const O=typeof C=="string"?C:C.url??String(C);return/\/v1\/responses$/.test(O)&&F?.method==="POST"?Promise.resolve(U(c)):y?y(C,F):Promise.reject(new Error("No fetch"))},await G("Explain the Monte Hall problem using logic. Think hard about the answer.","gpt-5-nano",void 0,void 0,{convId:0,anchorIndex:0}),await g(()=>T(l).length===1,4e3);const d=T(l)[0];await g(()=>E(d).length>=2,4e3),await g(()=>E(d).every(C=>H(C).includes("done")),4e3);const R=E(d),a=R.length;e.that(a===2,`Expected 2 panels, found ${a}`);const r=T(l);e.that(r.length===1,`Expected exactly one Reasoning window, found ${r.length}`);const _=A(R[0]),S=A(R[1]),t=b.trim(),m=w.trim();e.that(_===t,`Panel 1 final text should equal streamed content (${JSON.stringify(t)}), got ${JSON.stringify(_)}`),e.that(!W(_),"Panel 1 text is not an exact double of itself"),e.that(!_.includes(t+t),"Panel 1 text is not duplicated by concatenation"),e.that(S===m,`Panel 2 final text should equal streamed content (${JSON.stringify(m)}), got ${JSON.stringify(S)}`),e.that(!W(S),"Panel 2 text is not an exact double of itself"),e.that(!S.includes(m+m),"Panel 2 text is not duplicated by concatenation")}finally{o.set(q),x.set(u),f.set(s),v.set(h),await i(0),y&&(window.fetch=y)}}});M({id:"reasoning-live-no-duplicate-panels-per-sequence",name:"Reasoning SSE: ensures no duplicate panels are created for a single reasoning sequence",tags:["live","reasoning","ui"],timeoutMs:15e3,fn:async e=>{const s=n(f),h=n(v),u=n(x),q=n(o);try{f.set([{title:"No Duplicate Panels Test",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"Test question"}]}]),v.set(0),x.set([]),o.set([]),await i(0),await g(()=>!!I(),4e3);const $=k()[0],l=j(0,"gpt-5-nano",0),p=B("text",0,l);N(p,"First chunk "),N(p,"Second chunk "),D(p),await i(100);const P=n(o).filter(a=>a.responseId===l);e.that(P.length===1,`Expected 1 panel after completion, got ${P.length}`);const b=n(o).length;D(p),await i(100);const w=n(o).length;e.that(w===b,`Panel count should not increase on duplicate completion (was ${b}, now ${w})`),await g(()=>T($).length===1,2e3);const c=T($)[0],d=E(c);e.that(d.length===1,`DOM should show 1 panel, but shows ${d.length}`);const R=A(d[0]);e.that(R==="First chunk Second chunk",`Panel text should be original, got: "${R}"`)}finally{o.set(q),x.set(u),f.set(s),v.set(h),await i(0)}}});M({id:"reasoning-live-monte-hall-no-duplicate-panels",name:"Reasoning SSE: Monte Hall problem generates correct number of panels without duplicates",tags:["live","reasoning","ui"],timeoutMs:2e4,fn:async e=>{const s=n(f),h=n(v),u=n(x),q=n(o),y=window.fetch?.bind(window);try{J.set("high"),Y.set("low"),z.set("auto"),f.set([{title:"Monte Hall Test",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"Explain the Monte Hall problem using logic. Think hard about the answer."}]}]),v.set(0),x.set([]),o.set([]),await i(0),await g(()=>!!I(),4e3);const l=k()[0];let p=0;const P=window.startReasoningPanel;window.__testPanelCreations=[];const b=(t,m,C)=>(p++,window.__testPanelCreations.push({kind:t,convId:m,responseId:C,timestamp:Date.now()}),P(t,m,C)),w=[{event:"response.reasoning_text.delta",data:{delta:"Reasoning 1 start "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 1 middle "}},{event:"response.reasoning_text.done",data:{text:"Reasoning 1 start Reasoning 1 middle "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 2 start "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 2 end "}},{event:"response.reasoning_text.done",data:{text:"Reasoning 2 start Reasoning 2 end "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 3 content "}},{event:"response.reasoning_text.done",data:{text:"Reasoning 3 content "}},{event:"response.completed",data:{}}];window.fetch=(t,m)=>{const C=typeof t=="string"?t:t.url??String(t);if(/\/v1\/responses$/.test(C)&&m?.method==="POST"){const F=window.startReasoningPanel;window.startReasoningPanel=b;const O=U(w);return setTimeout(()=>{window.startReasoningPanel=F},100),Promise.resolve(O)}return y?y(t,m):Promise.reject(new Error("No fetch"))},await G("Explain the Monte Hall problem using logic. Think hard about the answer.","gpt-5-nano",void 0,void 0,{convId:0,anchorIndex:0}),await g(()=>T(l).length===1,4e3);const c=T(l)[0];await g(()=>E(c).length>0,4e3),await g(()=>E(c).every(t=>H(t).includes("done")),5e3);const d=E(c),R=d.length;e.that(R===3,`Expected exactly 3 panels for 3 reasoning sequences, got ${R}`),e.that(p===3,`startReasoningPanel should be called 3 times, was called ${p} times`);const a=d.map(t=>A(t)),r=new Set(a);e.that(r.size===3,`All 3 panels should have unique text, but got ${r.size} unique texts`),e.that(a[0].includes("Reasoning 1"),`Panel 1 should contain "Reasoning 1", got: "${a[0]}"`),e.that(a[1].includes("Reasoning 2"),`Panel 2 should contain "Reasoning 2", got: "${a[1]}"`),e.that(a[2].includes("Reasoning 3"),`Panel 3 should contain "Reasoning 3", got: "${a[2]}"`);for(let t=0;t<a.length;t++)e.that(!W(a[t]),`Panel ${t+1} should not have duplicated text`);const S=n(o).filter(t=>t.convId===0);e.that(S.length===3,`Store should have exactly 3 panels for this conversation, has ${S.length}`)}finally{delete window.__testPanelCreations,o.set(q),x.set(u),f.set(s),v.set(h),await i(0),y&&(window.fetch=y)}}});M({id:"reasoning-live-panel-text-integrity",name:"Reasoning SSE: panel text matches streamed content without duplication",tags:["live","reasoning","ui"],timeoutMs:15e3,fn:async e=>{const s=n(f),h=n(v),u=n(x),q=n(o);try{f.set([{title:"Text Integrity Test",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"Test"}]}]),v.set(0),x.set([]),o.set([]),await i(0),await g(()=>!!I(),4e3);const $=k()[0],l=[],p=window.appendReasoningText;window.appendReasoningText=(t,m)=>(l.push({panelId:t,text:m}),p(t,m));const P=j(0,"gpt-5-nano",0),b=["Alpha","Beta","Gamma"],w=B("text",0,P);for(const t of b)N(w,t),await i(50);L(w,b.join("")),D(w),await i(100),await g(()=>T($).length===1,2e3);const c=T($)[0],d=E(c);e.that(d.length===1,`Should have exactly 1 panel in DOM, got ${d.length}`);const R=A(d[0]),a="AlphaBetaGamma";e.that(R===a,`Final text should be "${a}", got "${R}"`);const r=l.filter(t=>t.panelId===w).map(t=>t.text).join("");e.that(r===a,`Appended text should total "${a}", got "${r}"`);const S=n(o).filter(t=>t.responseId===P);e.that(S.length===1,`Should have 1 panel in store for this window, got ${S.length}`)}finally{window.appendReasoningText=originalAppend,o.set(q),x.set(u),f.set(s),v.set(h),await i(0)}}});
